(function () {
    'use strict';

    angular.module('app', [
        // Angular modules
        'ngSanitize',
        'ui.router',
        "isteven-multi-select",
        'ui.bootstrap'

        // Custom modules

        // 3rd Party Modules
        
    ]);
})();

(function () {
    'use strict';

    angular
        .module('app')
        .factory('tagsSourceService', tagsSourceService);

    tagsSourceService.$inject = ['$http'];

    function tagsSourceService($http) {
        var service = {
            getTagsById: getData,
            tagChange: tagChange
        };

        return service;

        function getData(data) {
            return $http.get("/api/tagsToPaste?id=" + data)
                    .then(function (httpData) {
                return httpData.data;
            });
        }
        function tagChange(addArray, removeArray, id) {
            $http
                .post("/api/updateTagPaste/" + id, addArray)
                .then(function () {
                $http
                    .post("/api/deleteTagConnections/" + id, removeArray)
            });
        }
    }
})();
(function() {
    'use strict';

    angular
        .module('app')
        .directive('tagsEditModal', tagsEditModal);

    tagsEditModal.$inject = ['tagsSourceService'];
    
    function tagsEditModal (tagsSourceService) {
        
        var directive = {
            link: link,
            restrict: 'EA',
            templateUrl: "client/app/pastes/tagsEdit/tagsEditModal.html",
            scope : {
                api: "=",
                tags: "="
            }
        };
        return directive;

        function link(scope, element, attrs) {
            scope.api = { invoke: invoke };
            scope.paste = null;
            scope.pasteTags = null;
            scope.tags = null;
            scope.inputField = null;
            scope.addNewTag = addNewTag;
            scope.submit = submit;
            function addNewTag() {
                if (scope.inputField && scope.inputField.id) {
                    if (isValidName(scope.inputField.name)) {
                        var addItem = _.clone(scope.inputField);
                        addItem.isValid = true;
                        scope.pasteTags.push(addItem);
                    }
                }

                else {
                    if (isValidName(scope.inputField)) {
                        scope.pasteTags.push({ name: scope.inputField, isNew: true, isValid: true });
                    }
                }
            }
            function isValidName(name) {
                if (!name) {
                    return false;
                }
                
                var nameTrimmed = name.trim();
                if (nameTrimmed == "") {
                    return false;
                }
                
                return !_.any(scope.pasteTags, function (item) {
                    return item.name == nameTrimmed;
                });
            }
            function invoke(paste) {
                scope.inputField = "";
                scope.pasteTags = null;
                scope.paste = paste;
                tagsSourceService
                    .getTagsById(paste.id)
                    .then(function (result) {
                            scope.pasteTags = result;
                            scope.pasteTags.forEach(function (item) {
                                item.isValid = true;

                            });
                    })
                    .then(function () {
                        $(element).children('.modal').modal();
                    })
  
            }
            function submit() {
                var resultAdd = _.filter(scope.pasteTags, addCompareFn);
                var resultRemove = _.pluck(_.filter(scope.pasteTags, removeCompareFn), 'id');
                tagsSourceService.tagChange(resultAdd, resultRemove, scope.paste.id);

                function addCompareFn(item) {
                    return item.isValid;
                }
                function removeCompareFn(item) {
                    return !item.isValid && !item.isNew;
                }
                
            }
        }
    }

})();
(function() {
    'use strict';

    angular
        .module('app')
        .directive('pasteEdit', eventEdit);

    eventEdit.$inject = ['pasteSource'];
    
    function eventEdit (pasteSource) {
        // Usage:
        //     <eventEdit></eventEdit>
        // Creates:
        // 
        var directive = {
            link: link,
            restrict: 'EA',
            scope: {
                api: "="

            },
            templateUrl: "client/app/pastes/pasteEditor/pasteEditModal.html"
        };
        return directive;

        function link(scope, element, attrs) {
            scope.api = { invoke: invoke };
            scope.currPaste = null;
            scope.submit = submit;

            function invoke(paste) {
                scope.currPaste = paste;
                tinymce.init({
                    selector: "#myModalEditBody",
                    plugins: [
                        "advlist autolink lists link image charmap print preview anchor",
                        "searchreplace visualblocks code fullscreen",
                        "insertdatetime media table contextmenu paste"
                    ],
                    paste_webkit_styles: "all",
                    paste_data_images: true,
                    paste_retain_style_properties: "all",
                    toolbar: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image"
                });
                
                tinymce.activeEditor.setContent(paste.data, { format: 'raw' });
                $(element).children('.modal').modal("show");
                $("myModalEditBody").removeClass("modal-body");
            }
            function submit() {
                scope.currPaste.data = tinymce.activeEditor.getContent({ format: 'raw' });
                tinymce.activeEditor.remove();
                $(element).modal("hide");
                pasteSource.updatePaste(scope.currPaste);
            
            }
        }
        
    }

})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('pasteSource', pasteSource);

    pasteSource.$inject = ['$http'];

    function pasteSource($http) {
        var service = {
            getInitData: getInitData,
            getPasteContent: getPasteContent,
            getFilteredPastesId: getFilteredPastesId,
            deletePaste: deletePaste,
            updatePaste: updatePaste
        };

        return service;

        function getInitData() {
            return $http.get("/api/init")
                        .then(simplify);
        }
        function getPasteContent(id) {
            return $http
                    .get("api/pastes/" + id)
                    .then(simplify);   
        }
        function getFilteredPastesId(filters) {
            return $.get("/api/filters", { 'filters': filters })
                     .then(function (res) {
                return _.union.apply(_, res);
            });
            ;
        }
        function deletePaste(paste) {
            return $http.delete("/api/pastes/" + paste.id);
        }
        function simplify(httpData) {
            return httpData.data;
        }
        function updatePaste(paste) {
            return $http.put("api/pastes/" + paste.id, paste);
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .controller('pasteController', paste);

    paste.$inject = ['$scope', 'pasteSource']; 

    function paste($scope, pasteSource) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'paste';
        vm.pastes = [];
        vm.tags = null;
        vm.inputTags = null;;
        vm.selectedTags = [[]];
        vm.pastesFilter = null;
        vm.tagsEditApi = null;
        vm.pasteEditApi = null;
        vm.filterIds = [0];
        vm.addFilter = addFilter;
        vm.showPaste = showPaste;
        vm.updateTagChange = updateTagChange;
        vm.changePasteTags = changePasteTags;
        vm.deletePaste = deletePaste;
        vm.updatePaste = updatePaste;
        activate();
        function changePasteTags(paste) {
            vm.tagsEditApi.invoke(paste);
        }
        function updatePaste(paste) {
            vm.pasteEditApi.invoke(paste);
        }
        function addFilter() {
            vm.filterIds.push(vm.filterIds.length);
            vm.selectedTags.push([]);
            vm.inputTags.push(_.map(vm.tags, _.clone));
        }
        function showPaste(paste) {
            if (!paste.content) {
                paste.content = 'Loading';
                pasteSource
                    .getPasteContent(paste.id)
                    .then(function (result) {
                    paste.content = result;
                    $(".innerDivs").contents().css("position", "relative");
                });

            }
        }
        function activate() {
            pasteSource.getInitData()
                       .then(function (data) {
                vm.pastes = data.pastes;
                vm.tags = data.tags;
                vm.inputTags = createInputTags();
            });

        }
        function updateTagChange() {
            var args = _.map(vm.selectedTags, _.partial(_.pluck, _, 'id'));
            pasteSource
                 .getFilteredPastesId(args)
                 .then(function (result) {
                vm.pastesFilter = _.pluck(result, 'id');
            });
                        
        }
        function createInputTags() {
            var res = [];
            res.push(_.map(vm.tags, _.clone));
            return res;
        }
        function deletePaste(paste) {
            bootbox.confirm("Do you realy want to delete the record", function (result) {
                if (result) {
                    pasteSource
                         .deletePaste(paste)
                         .then(function () {
                        deletePasteObj(paste);
                    });
                }
            });
        }

        function deletePasteObj(paste) {
            var index = vm.pastes.indexOf(paste);
            vm.pastes.splice(index, 1);
        }
        
        
    }
})();

(function () {
    'use strict';

    angular
        .module('app')
        .controller('pagesController', pagesController);

    pagesController.$inject = ['pageSourceService']; 

    function pagesController(pageSource) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'pages';
        vm.pages = [];
        vm.tags = null;
        vm.inputTags = null;;
        vm.selectedTags = [];
        vm.pagesFilter = null;
        activate();

        function activate() {
            pageSource.getInitData()
                       .then(function (data) {
                vm.pages = data.pages;
                vm.tags = data.tags;
            });
        }
        function updateTagChange() {
            var args = _.pluck(args, 'id');
            pasteSource
                 .getFilteredPages(args)
                 .then(function (result) {
                vm.pagesFilter = _.pluck(result, 'id');
            });
                        
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('app')
        .factory('pageSourceService', pageSourceService);

    pageSourceService.$inject = ['$http'];

    function pageSourceService($http) {
        return {
            getInitData: getInitData,
            getFilteredPages: getFilteredPages
        }

        function getInitData() {
            return $http.get("/apiPages/init")
                        .then(simplify);
        }
        function getFilteredPages(filters) {
            return $.get("/apiPages/filters", { 'filters': filters })
                     .then(simplify);
        }
        function simplify(httpData) {
            return httpData.data;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .config(uiRouterConf);

    uiRouterConf.$inject = ['$stateProvider', '$urlRouterProvider'];
    function uiRouterConf($stateProvider, $urlRouterProvider) {
        $urlRouterProvider.otherwise('/home');
        
        $stateProvider
        .state('home', {
            url: '/home',
            templateUrl : 'views/partial-views/home.partial.html'
        })
        .state('pastes', {
            url: '/pastes',     
            templateUrl: 'views/partial-views/pasteContent.partial.html',
            controller: 'pasteController as vm',
           
        })
        .state('pages', {
            url: '/pages',
            templateUrl: 'views/partial-views/pagesContent.partial.html',
            controller: 'pagesController as vm'
        });
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .filter('InArray', InArray);
    
    InArray.$inject = ['$filter'];
    function InArray($filter) {
        return InArrayFilter;
        function InArrayFilter(list, arrayFilter, element) {
            if (arrayFilter) {
                return $filter("filter")(list, function (listItem) {
                    return arrayFilter.indexOf(listItem[element]) != -1;
                });
            }
            else {
                return list;
            }
        }        
    }
})();