'use strict';
var chalk = require('chalk');
var table = require('text-table');
var logSymbols = require('log-symbols');
var stringLength = require('string-length');
var plur = require('plur');
var fs = require('fs');

//Logger
var logToFile = '';
var logObj =
{
	path: '',
	messages: [''],
	reports: ['']
};

module.exports = {
	toString: function () {
		return __filename;
	},
	reporter: function (result, config, options) {
		var total = result.length;
		var ret = '';
		var headers = [];
		var prevfile;
		var errorCount = 0;
		var warningCount = 0;


		options = options || {};

		//Logger
		logToFile = '';

		ret += table(result.map(function (el, i) {
			var err = el.error;
			// E: Error, W: Warning, I: Info
			var isError = err.code && err.code[0] === 'E';

			var line = [
				'',
				chalk.gray('line ' + err.line),
				chalk.gray('col ' + err.character),
				isError ? chalk.red(err.reason) : chalk.blue(err.reason)
			];

			if (el.file !== prevfile) {
				headers[i] = el.file;
			}

			if (options.verbose) {
				line.push(chalk.gray('(' + err.code + ')'));
			}

			if (isError) {
				errorCount++;
			} else {
				warningCount++;
			}

			prevfile = el.file;
			
			//Logger
			logToFile += '<p><span style="font-family:courier new,courier,monospace;"><span style="color:#696969;">';
			logToFile += 'line ' + err.line + ' col ' + err.character;
				if(isError)
				{
					logToFile += '</span> <span style="color:#ff0000;">';
					logToFile += err.reason;
					logToFile += '</span></span></p><p>';
				}
				else
				{
					logToFile += '</span> <span style="color:#0000cd;">';
					logToFile += err.reason;
					logToFile += '</span></span></p><p>';
				}
			return line;
		}), {
			stringLength: stringLength
		}).split('\n').map(function (el, i) {
			return headers[i] ? '\n' + chalk.underline(headers[i]) + '\n' + el : el;
		}).join('\n') + '\n\n';

		if (total > 0) {
			if (errorCount > 0) {
				ret += '  ' + logSymbols.error + '  ' + errorCount + ' ' + plur('error', errorCount) + (warningCount > 0 ? '\n' : '');
				//Logger
				logToFile += '<p><span style="font-family:courier new,courier,monospace;"><span style="color:#ff0000;">x </span>';
				logToFile += errorCount + ' error ';
				logToFile += '</span></p>';
			}

			ret += '  ' + logSymbols.warning + '  ' + warningCount + ' ' + plur('warning', total);
			//Logger
			logToFile += '<p><span style="font-family:courier new,courier,monospace;"><span style="color:#daa520;">!! </span>';
			logToFile += warningCount + ' warning ';
			logToFile += '</span></p>';
		} else {
			ret += '  ' + logSymbols.success + ' No problems';
			ret = '\n' + ret.trim();
			//Logger
			logToFile += '<p><span style="font-family:courier new,courier,monospace;"><span style="color:#0a690b;">';
			logToFile += 'No problems';
			logToFile += '</span></span></p>';
		}
		//Logger
		//logToFile += ret;
		logToFile += '<hr /><p>&nbsp;</p>';
		fs.appendFile('Dist/jshintLog.html', logToFile);
		
		console.log(ret + '\n');
	}
};
